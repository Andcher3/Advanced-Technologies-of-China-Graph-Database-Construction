# --- START OF FILE qa_api.py ---

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
import uvicorn
import os
from typing import List, Dict, Any

# Import functions and resources from your existing script
# Make sure neo4j_query_executor.py is in the same directory or Python path
from neo4j_query_executor import (
    query_knowledge_graph_with_llm,
    init,
    shutdown_resources
)
from neo4j_query_executor import llm_client_instance


# --- Pydantic Models for Request/Response ---

class QueryInput(BaseModel):
    """Defines the expected structure of the incoming request payload."""
    query: str = Field(..., description="The user's natural language question.")
    history: List[Dict[str, str]] = Field([],
                                          description="Conversation history (optional, not used in current single-turn logic).")
    neo4j_enabled: bool = Field(True,
                                description="Flag to indicate if Neo4j should be used (always true in this implementation).")
    session_id: str = Field(..., description="Unique identifier for the user session.")


class AnswerOutput(BaseModel):
    """Defines the structure of the outgoing response payload."""
    answer: str = Field(..., description="The final answer generated by the QA system.")
    # You could add other fields like status, error_message, etc.


# --- FastAPI App Initialization ---

app = FastAPI(
    title="Knowledge Graph QA API",
    description="API for querying the Neo4j knowledge graph using LLM."
)


# --- FastAPI Event Handlers (Startup and Shutdown) ---

@app.on_event("startup")
async def startup_event():
    """Initializes resources (Neo4j Driver, LLM Client) when the FastAPI app starts."""
    print("FastAPI startup event: Initializing resources...")
    try:
        # Initialize resources using the function from your script
        global llm_client_instance
        llm_client_instance = init()
        print("Resources initialized successfully.")
    except Exception as e:
        print(f"Error during startup initialization: {e}")
        # Depending on severity, you might want to raise an exception to prevent the server from starting
        # raise HTTPException(status_code=500, detail=f"Failed to initialize resources: {e}")


@app.on_event("shutdown")
def shutdown_event():
    """Shuts down resources (Neo4j Driver) when the FastAPI app stops."""
    print("FastAPI shutdown event: Shutting down resources...")
    shutdown_resources()
    print("Resources shut down.")


# --- API Endpoint ---

@app.post("/answer", response_model=AnswerOutput)
async def get_answer(query_input: QueryInput):
    print(query_input)
    """
    Receives a user question and returns an answer generated using the knowledge graph and LLM.
    """
    print(f"Received query for session {query_input.session_id}: {query_input.query}")

    # Check if LLM client was successfully initialized at startup
    if llm_client_instance is None:
        print("LLM client not initialized.")
        raise HTTPException(status_code=500, detail="LLM client not available.")

    # Check if Neo4j driver was successfully initialized at startup
    # (query_knowledge_graph_with_llm will check for the driver internally,
    # but an explicit check here can provide a clearer error message)
    from neo4j_query_executor import \
        get_neo4j_driver  # Import here to avoid circular dependency if initialize_resources imports app
    if get_neo4j_driver() is None:
        print("Neo4j driver not initialized.")
        raise HTTPException(status_code=500, detail="Database connection not available.")

    # Use the imported function to process the query
    # We pass the user's query and the globally initialized llm_client_instance
    # Note: The current query_knowledge_graph_with_llm expects llm_client as a parameter.
    # We need to modify neo4j_query_executor.py to use the global instance instead.
    try:
        # Call the main QA logic function
        final_answer = query_knowledge_graph_with_llm(query_input.query)
        print(f"Generated answer for session {query_input.session_id}: {final_answer}")
        return AnswerOutput(answer=final_answer)

    except Exception as e:
        # Catch any unexpected errors during query processing
        print(f"Error processing query for session {query_input.session_id}: {e}")
        raise HTTPException(status_code=500, detail=f"An internal error occurred while processing your query: {e}")


# --- Run the server (for development/testing) ---
if __name__ == "__main__":
    # Ensure your environment variables for Neo4j and DeepSeek API are set
    # For example, in your terminal before running:
    # export NEO4J_URI="bolt://10.5.132.251:7687"
    # export NEO4J_USER="neo4j"
    # export NEO4J_PASSWORD="your_neo4j_password"
    # export DEEPSEEK_API_KEY="your_deepseek_api_key"

    # You might need to install uvicorn: pip install uvicorn
    print("Starting FastAPI server...")
    uvicorn.run(app, host="0.0.0.0", port=8000)

# --- END OF FILE qa_api.py ---
